name: Release

on:
  push:
    branches: [main]
    tags:
      - "v*"

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      releases_created: ${{ steps.release.outputs.releases_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
    steps:
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          release-type: rust

  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    needs: release-please
    if: needs.release-please.outputs.releases_created || startsWith(github.ref, 'refs/tags/')
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    steps:
      - uses: actions/checkout@v5

      - name: Setup Rust
        uses: ./.github/actions/setup-rust
        with:
          target: ${{ matrix.target }}

      - name: Setup cross-compilation
        uses: ./.github/actions/setup-cross-compile
        with:
          target: ${{ matrix.target }}

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Check binary size
        uses: ./.github/actions/check-binary-size
        with:
          target: ${{ matrix.target }}
          os: ${{ contains(matrix.os, 'macos') && 'macos' || 'linux' }}

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          tar czf picolayer-${{ matrix.target }}.tar.gz picolayer
          mv picolayer-${{ matrix.target }}.tar.gz ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: picolayer-${{ matrix.target }}
          path: picolayer-${{ matrix.target }}.tar.gz

  release:
    name: Upload Release Assets
    needs: [build, release-please]
    runs-on: ubuntu-latest
    if: needs.release-please.outputs.releases_created || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Get release info
        id: release_info
        run: |
          if [ "${{ needs.release-please.outputs.releases_created }}" = "true" ]; then
            TAG="${{ needs.release-please.outputs.tag_name }}"
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION=$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)
            TAG="v${VERSION}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
          fi

          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"

      - name: Upload binaries to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag }}
          files: artifacts/*/picolayer-*.tar.gz
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
