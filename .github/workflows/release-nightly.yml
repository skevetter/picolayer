name: Nightly Release

on:
  schedule:
    - cron: "0 18 * * *" # Run daily at 18:00 UTC
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: write
  packages: write

jobs:
  check-commits:
    name: Check for New Commits
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check for commits since last release
        id: check
        run: |
          # Get the latest release tag
          LATEST_TAG="$(git describe --tags --abbrev=0 2>/dev/null || echo "")"

          if [ -z "$LATEST_TAG" ]; then
            echo "No previous releases found, building nightly"
            echo "should_build=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # Check if there are new commits since the last release
          COMMITS_SINCE_RELEASE="$(git rev-list "${LATEST_TAG}..HEAD" --count)"

          if [ "$COMMITS_SINCE_RELEASE" -gt 0 ]; then
            echo "Found $COMMITS_SINCE_RELEASE new commits since $LATEST_TAG"
            echo "should_build=true" >> "$GITHUB_OUTPUT"
          else
            echo "No new commits since $LATEST_TAG, skipping build"
            echo "should_build=false" >> "$GITHUB_OUTPUT"
          fi

  build:
    name: Build ${{ matrix.target }}
    needs: check-commits
    if: needs.check-commits.outputs.should_build == 'true'
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest

    steps:
      - uses: actions/checkout@v5

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-${{ matrix.target }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Install dependencies for cross-compilation (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Build
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Check binary size
        run: |
          SIZE="$(stat -c%s "target/${{ matrix.target }}/release/picolayer" 2>/dev/null || stat -f%z "target/${{ matrix.target }}/release/picolayer")"
          MB_SIZE=$((SIZE / 1024 / 1024))
          echo "Binary size: $MB_SIZE MB"
          if [ "$SIZE" -gt 20000000 ]; then
            echo "Error: Binary size exceeds 20MB"
            exit 1
          fi

      - name: Create archive
        run: |
          cd target/${{ matrix.target }}/release
          tar czf picolayer-${{ matrix.target }}.tar.gz picolayer
          mv picolayer-${{ matrix.target }}.tar.gz ../../../

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: picolayer-${{ matrix.target }}
          path: picolayer-${{ matrix.target }}.tar.gz

  release:
    name: Create Nightly Release
    needs:
      - check-commits
      - build
    if: needs.check-commits.outputs.should_build == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Download artifacts
        uses: actions/download-artifact@v5
        with:
          path: artifacts

      - name: Generate nightly tag
        id: tag
        run: |
          VERSION="$(grep '^version = ' Cargo.toml | head -1 | cut -d'"' -f2)"
          TAG="v${VERSION}-nightly.$(date +"%Y%m%d")"
          BUILD_DATE="$(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "tag=${TAG}" >> "$GITHUB_OUTPUT"
          echo "date=${BUILD_DATE}" >> "$GITHUB_OUTPUT"
          echo "Nightly tag: ${TAG}"

      - name: Delete existing nightly release
        run: |
          gh release delete "${{ steps.tag.outputs.tag }}" --yes || true
          git push origin ":refs/tags/${{ steps.tag.outputs.tag }}" || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Nightly Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.tag.outputs.tag }}
          name: ${{ steps.tag.outputs.tag }}
          draft: false
          prerelease: true
          generate_release_notes: false
          body: |
            This is a nightly pre-release build and may be unstable.

            **Build Date**: ${{ steps.tag.outputs.date }}
            **Commit**: ${{ github.sha }}
          files: |
            artifacts/*/picolayer-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
